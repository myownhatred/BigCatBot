package dnd

import (
	"fmt"
	"math/rand"
	"strconv"
)

type Gender string
type Race string
type Class string
type DamageType string
type Stat string
type ButtonMode string
type ActionType string

const (
	Spermtank         Gender = "—Å–ø–µ—Ä–º–æ–±–∞–∫"
	Vaginacapitallist Gender = "–≤–∞–≥–∏–Ω–æ–∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç"
	Moongender        Gender = "–º—É–Ω–≥–µ–Ω–¥–µ—Ä"
	Agender           Gender = "–∞–≥–µ–Ω–¥–µ—Ä"
	Gendervoy         Gender = "–≥–µ–Ω–¥–µ—Ä–≤–æ–π"
	Gendervoid        Gender = "–≥–µ–Ω–¥–µ—Ä–≤–æ–π–¥"
	Nonbinary         Gender = "–Ω–æ–Ω–±–∞–π–æ—Ä–∏"
	Xenogender        Gender = "–∫—Å–µ–Ω–æ–≥–µ–Ω–¥–µ—Ä"
	Dwarf             Race   = "–¥–≤–æ—Ä—Ñ"
	Halfling          Race   = "—Ö–∞–ª—Ñ–ª–∏–Ω–≥"
	Human             Race   = "—Ö—É–º–∞–Ω—Å"
	Elf               Race   = "—ç–ª—å—Ñ"
	Drow              Race   = "–¥—Ä–∞—É"
	Gnome             Race   = "–≥–Ω—É–º"
	Dragonborn        Race   = "–¥—Ä–∞–≥–æ–Ω–±–æ—Ä–Ω"
	Halforc           Race   = "–ø–æ–ª—É–æ—Ä–∫"
	Halfelf           Race   = "–ø–æ–ª—É—ç–ª—å—Ñ"
	Tiefling          Race   = "—Ç–∏—Ñ–ª–∏–Ω–≥"
	Artificer         Class  = "–∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å"
	Barbarian         Class  = "–±–∞—Ä–±–∞—Ä–∏–∞–Ω"
	Bard              Class  = "–±–∞—Ä–¥"
	Cleric            Class  = "–∂—Ä–µ—Ü"
	Druid             Class  = "–¥—Ä—É–ª—å"
	Fighter           Class  = "—Å–æ–ª–¥–∞—Ç"
	Monk              Class  = "–º–æ–Ω–∫"
	Paladin           Class  = "–ø–∞–ª–ª–ê–¥–∏–Ω"
	Ranger            Class  = "–µ–≥–µ—Ä—å"
	Rogue             Class  = "—à–µ–ª—å–º–∞"
	Sorcerer          Class  = "–∫–æ–ª–¥—É–Ω"
	Warlock           Class  = "–≤–æ–µ–Ω–Ω—ã–π –∑–∞–º–æ–∫"
	Wizard            Class  = "–≤–∏–∑–∞—Ä–¥"

	DamageDubas  DamageType = "–¥—É–±–∞—Å—è—â–∏–π"
	DamagePierce DamageType = "–∫–æ–ª—é—â–∏–π"
	DamageSlash  DamageType = "—Ä–µ–∂—É—â–∏–π"
	DamageAcid   DamageType = "–∫–∏—Å–ª–æ—Ç–Ω—ã–π"

	Strenght     Stat = "—Å–∏–ª–∞"
	Dexterity    Stat = "–ª–æ–≤–∫–æ—Å—Ç—å"
	Constitution Stat = "—Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ"
	Intellegence Stat = "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
	Wisidom      Stat = "–º—É–¥—Ä–æ—Å—Ç—å"
	Charisma     Stat = "—Ö–∞—Ä–∏–∑–º–∞"

	BtnsActions     ButtonMode = "–¥–µ–π—Å—Ç–≤–∏–µ"
	BtnsAttackMelee ButtonMode = "–∞—Ç–∞–∫–∞ —Ä—É–∫–æ–ø–∞—à–Ω–∞—è"
	BtnsAttackRange ButtonMode = "–∞—Ç–∞–∫–∞ —Å –ª–æ–Ω–≥—Ä–µ–Ω–¥–∂–∏"
	BtnsSpellcast   ButtonMode = "–∑–∞–∫–ª—ã"

	MAttack   ActionType = "–º–∏–ª–∏ –∞—Ç–∞–∫–∞"
	RAttack   ActionType = "—Ä–µ–Ω–∂ –∞—Ç–∞–∫–∞"
	SpellCast ActionType = "–∫–æ–ª–¥—É–Ω—Å—Ç–≤–æ"
	ItemUse   ActionType = "–≤–µ—â–µ–Ω–∏–µ"
)

type Char struct {
	Name        string
	Title       string
	Gender      Gender
	Race        Race
	Class       Class
	Hitpoints   int
	AC          int
	Str         int
	Dex         int
	Con         int
	Intl        int
	Wis         int
	Cha         int
	Level       int
	Initiative  int
	Weapon      *Weapon
	Armor       *Armor
	Target      *Char
	IsNPC       bool
	Generation  string
	Spells      []Spell
	CastingStat int
	ButtonMode  ButtonMode
}

var genders = [...]Gender{Spermtank, Vaginacapitallist, Moongender, Agender, Gendervoy, Gendervoid, Nonbinary, Xenogender}
var races = [...]Race{Dwarf, Halfling, Human, Elf, Drow, Gnome, Dragonborn, Halfelf, Halforc, Tiefling}
var classes = [...]Class{Artificer, Barbarian, Bard, Cleric, Druid, Fighter, Monk, Paladin, Ranger, Rogue, Sorcerer, Warlock, Wizard}

func RollChar() Char {
	genders := []Gender{Spermtank, Vaginacapitallist, Moongender, Agender, Gendervoy, Gendervoid, Nonbinary, Xenogender}
	races := []Race{Dwarf, Halfling, Human, Elf, Drow, Gnome, Dragonborn, Halfelf, Halforc, Tiefling}
	classes := []Class{Artificer, Barbarian, Bard, Cleric, Druid, Fighter, Monk, Paladin, Ranger, Rogue, Sorcerer, Warlock, Wizard}
	var chel Char
	chel.Gender = genders[rand.Intn(len(genders))]
	chel.Class = classes[rand.Intn(len(classes))]
	chel.Race = races[rand.Intn(len(races))]
	chel.Generation += "–ì–µ–Ω–¥–∏—Ä: " + string(chel.Gender) + "\n"
	chel.Generation += "–†–∞—Å—Å–∞: " + string(chel.Race) + "\n"
	chel.Generation += "–ö–ª–∞—Å: " + string(chel.Class) + "\n"
	// picking two stats to be +1
	bon1 := -1
	bon2 := -1
	if chel.Race == Halfelf {
		bon1 = rand.Intn(5)
		bon2 = rand.Intn(5)
		for bon2 == bon1 {
			bon2 = rand.Intn(5)
		}
	}
	chel.Str, _ = dice3of4()
	if chel.Race == Dwarf || chel.Race == Dragonborn || chel.Race == Halforc {
		chel.Str += 2
	} else if bon1 == 0 || bon2 == 0 || chel.Race == Human {
		chel.Str += 1
	}
	chel.Generation += "ü¶¨–°–∏–ª–∞: " + strconv.Itoa(chel.Str) + "\n"
	chel.Dex, _ = dice3of4()
	if chel.Race == Halfling || chel.Race == Elf {
		chel.Dex += 2
	} else if bon1 == 1 || bon2 == 1 || chel.Race == Human {
		chel.Dex += 1
	}
	chel.Generation += "üêà–õ–æ–≤–∫–æ—Å—Ç—å: " + strconv.Itoa(chel.Dex) + "\n"
	chel.Con, _ = dice3of4()
	if chel.Race == Dwarf {
		chel.Con += 2
	} else if chel.Race == Halforc || bon1 == 2 || bon2 == 2 || chel.Race == Human {
		chel.Con += 1
	}
	chel.Generation += "üêª–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: " + strconv.Itoa(chel.Con) + "\n"
	chel.Intl, _ = dice3of4()
	if chel.Race == Gnome {
		chel.Intl += 2
	} else if bon1 == 3 || bon2 == 3 || chel.Race == Tiefling || chel.Race == Human {
		chel.Intl += 1
	}
	chel.Generation += "ü¶ä–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: " + strconv.Itoa(chel.Intl) + "\n"
	chel.Wis, _ = dice3of4()
	if bon1 == 4 || bon2 == 4 || chel.Race == Human {
		chel.Wis += 1
	}
	chel.Generation += "ü¶â–ú—É–¥—Ä–æ—Å—Ç—å: " + strconv.Itoa(chel.Wis) + "\n"
	chel.Cha, _ = dice3of4()
	if chel.Race == Halfelf || chel.Race == Tiefling {
		chel.Cha += 2
	} else if chel.Race == Dragonborn || chel.Race == Human || chel.Race == Drow {
		chel.Cha += 1
	}
	chel.Generation += "ü¶Ö–•–∞—Ä—è: " + strconv.Itoa(chel.Cha) + "\n"

	chel.Level = 1

	weapon := CreateWeaponCommon()
	chel.Weapon = weapon
	armor := CreateLightArmor()
	chel.Armor = armor

	// hit points
	switch chel.Class {
	case Artificer:
		chel.Hitpoints = 8 + calculateBonus(chel.Con)
		chel.Spells = append(chel.Spells, *CreateSpellAcidSplash())
		chel.CastingStat = chel.Intl
	case Barbarian:
		chel.Hitpoints = 12 + calculateBonus(chel.Con)
	case Bard:
		chel.Hitpoints = 8 + calculateBonus(chel.Con)
		chel.CastingStat = chel.Cha
	case Cleric:
		chel.Hitpoints = 8 + calculateBonus(chel.Con)
		chel.Spells = append(chel.Spells, *CreateSpellAcidSplash())
		chel.CastingStat = chel.Wis
	case Druid:
		chel.Hitpoints = 8 + calculateBonus(chel.Con)
		chel.Spells = append(chel.Spells, *CreateSpellAcidSplash())
		chel.CastingStat = chel.Wis
	case Fighter:
		chel.Hitpoints = 10 + calculateBonus(chel.Con)
	case Monk:
		chel.Hitpoints = 8 + calculateBonus(chel.Con)
	case Paladin:
		chel.Hitpoints = 10 + calculateBonus(chel.Con)
		chel.CastingStat = chel.Cha
	case Ranger:
		chel.Hitpoints = 10 + calculateBonus(chel.Con)
		switch rand.Intn(2) + 1 {
		case 1:
			chel.Armor = CrateArmorScaleMail()
		case 2:
			chel.Armor = CrateArmorLeather()
		}
		chel.CastingStat = chel.Wis
	case Rogue:
		chel.Hitpoints = 8 + calculateBonus(chel.Con)
	case Sorcerer:
		chel.Hitpoints = 6 + calculateBonus(chel.Con)
		chel.Spells = append(chel.Spells, *CreateSpellAcidSplash())
		chel.CastingStat = chel.Cha
	case Warlock:
		chel.Hitpoints = 8 + calculateBonus(chel.Con)
		chel.Spells = append(chel.Spells, *CreateSpellAcidSplash())
		chel.CastingStat = chel.Cha
	case Wizard:
		chel.Hitpoints = 6 + calculateBonus(chel.Con)
		chel.Spells = append(chel.Spells, *CreateSpellAcidSplash())
		chel.Armor = CreateFakeArmor()
		chel.CastingStat = chel.Intl
	}

	chel.Generation += "‚ù§Ô∏è–•–∏—Ç—ã: " + strconv.Itoa(chel.Hitpoints) + "\n"
	// remake AC calc to use dex limitations for med armor
	chel.AC = chel.Armor.AC + calculateBonus(chel.Dex)
	chel.Generation += "üõ°Ô∏è–ê—Ä–º–æ—Ä: " + strconv.Itoa(chel.AC) + "\n"
	chel.ButtonMode = BtnsActions
	return chel
}

func CharFromData(str, dex, con, intl, wis, cha, AC, hitpoints, gender, race, class int) (Char, error) {
	var chel Char
	// validity check if what
	valid := ifDicesStat(str) && ifDicesStat(dex) && ifDicesStat(con) &&
		ifDicesStat(intl) && ifDicesStat(wis) && ifDicesStat(cha)
	if !valid {
		return chel, fmt.Errorf("–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç—ã")
	}
	if gender > len(genders)-1 || gender < 0 {
		return chel, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π –≥–µ–Ω–¥–µ—Ä")
	}
	if race > len(races)-1 || race < 0 {
		return chel, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω–∞—è rase")
	}
	if class > len(classes)-1 || class < 0 {
		return chel, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å")
	}
	chel.Gender = genders[gender]
	chel.Race = races[race]
	chel.Class = classes[class]
	chel.Str = str
	chel.Dex = dex
	chel.Con = con
	chel.Intl = intl
	chel.Wis = wis
	chel.Cha = cha
	chel.AC = AC
	chel.Hitpoints = hitpoints
	chel.Level = 1
	return chel, nil
}

func (char *Char) CharStats() (str, dex, con, intl, wis, cha int) {
	return char.Str, char.Dex, char.Con, char.Intl, char.Wis, char.Cha
}

func dice3of4() (val int, scrib string) {
	min := rand.Intn(6) + 1
	summ := min
	scrib += strconv.Itoa(min)
	for i := 0; i < 3; i++ {
		k := rand.Intn(6) + 1
		summ += k
		if k < min {
			min = k
		}
		scrib += " + " + strconv.Itoa(k)
	}
	scrib += " = " + strconv.Itoa(summ) + " => " + strconv.Itoa(summ-min)
	return summ - min, scrib
}

func dice6() (val int) {
	return rand.Intn(6) + 1
}

func dice8() (val int) {
	return rand.Intn(8) + 1
}

func dice12() (val int) {
	return rand.Intn(12) + 1
}

func dice20() (val int) {
	return rand.Intn(20) + 1
}

func ifDicesStat(stat int) bool {
	if stat < 3 || stat > 18 {
		return false
	}
	return true
}

func calculateBonus(value int) int {
	if value > 10 {
		return (value - 10) / 2
	} else {
		return (value - 11) / 2 // This will give -1 for 9 or 8
	}
}

func (c *Char) GetInitiative() int {
	return calculateBonus(c.Dex) + dice20()
}

func (c *Char) GetAttackDamage(target int) (int, string) {
	//hit or miss
	roll := dice20()
	switch roll {
	case 1:
		return 0, "—Ä–æ–ª–ª 1 - –∫—Ä–µ—Ç–∏–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–æ—Ö"
	case 20:
		dmg := 0
		for d := 0; d < 2; d++ {
			for i := 0; i < c.Weapon.DamageRolls; i++ {
				dmg += rand.Intn(c.Weapon.DamageDice) + 1 + c.DnDCharGetWeaponBonus()
			}
		}
		return dmg, fmt.Sprintf("—Ä–æ–ª–ª 20 - –∫—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Ç –ø–æ–ø–∞–ª –Ω–∞ %d —É—Ä–æ–Ω—ã", dmg)
	default:
		dmg := 0
		mod := calculateBonus(c.Str)
		if c.Weapon.ifFencing() {
			mod = calculateBonus(c.Dex)
		}
		if roll+mod >= target {
			for i := 0; i < c.Weapon.DamageRolls; i++ {
				dmg += rand.Intn(c.Weapon.DamageDice) + 1 + c.DnDCharGetWeaponBonus()
			}
			return dmg, fmt.Sprintf("—Ä–æ–ª–ª %d + –º–æ–¥ %d –ø–æ–ø–∞–ª –Ω–∞ %d —É—Ä–æ–Ω—ã", roll, mod, dmg)
		} else {
			return 0, fmt.Sprintf("—Ä–æ–ª–ª %d + –º–æ–¥ %d –ø—Ä–æ–º–∞—Ö –∏–±—É—á–∏–π", roll, mod)
		}
	}
}

func (c *Char) GetSpellDamage(target *Char, spellIndex int) (int, string) {
	// hit or miss
	// TODO take it from class table
	masteryBonus := 2
	savingBonus := 0
	if c.Spells[spellIndex].SavingStat == target.SavingBonus() {
		savingBonus += 2
	}
	SL := masteryBonus + calculateBonus(c.CastingStat) + 8
	ST := dice20() + savingBonus + target.CalculateBonusByStat(c.Spells[spellIndex].SavingStat)
	if ST > SL {
		return dice6(), "—Å–ø–µ–ª–ª –µ–±–∞—à–∏—Ç"
	}
	return 0, "—Å–ø–µ–ª–ª –º–∏–º–∞"
}

func (c *Char) DnDCharGetWeaponBonus() int {
	for _, p := range c.Weapon.WeaponProperties {
		if p == WPFencing {
			return calculateBonus(c.Dex)
		}
	}
	return calculateBonus(c.Str)
}

func (c *Char) DnDCharIfRangedAttack() bool {
	for _, p := range c.Weapon.WeaponProperties {
		if p == WPThrown || p == WPRange {
			return true
		}
	}
	return false
}

func (c *Char) CalculateBonusByStat(stat Stat) int {
	return calculateBonus(c.StatAtoi(stat))
}

func (c *Char) StatAtoi(stat Stat) int {
	switch stat {
	case Strenght:
		return c.Str
	case Dexterity:
		return c.Dex
	case Constitution:
		return c.Con
	case Intellegence:
		return c.Intl
	case Wisidom:
		return c.Wis
	case Charisma:
		return c.Cha
	}
	return 0
}

// TODO return array, or make checker if given stat present in saving bonus array
func (c *Char) SavingBonus() Stat {
	// TODO take it from class
	return Dexterity
}

// simple placeholder for saving throws
func (c *Char) SavingThrow(stat Stat) int {
	return dice20() + c.CalculateBonusByStat(stat)
}
