package bigcat

import (
	"Guenhwyvar/entities"
	freevector "Guenhwyvar/lib/vector"
	"Guenhwyvar/servitor"
	"fmt"
	"log/slog"
	"math"
	"math/rand"
	"strconv"
	"strings"
	"time"

	tele "gopkg.in/telebot.v4"
)

func CmdVectorAddNewType(c tele.Context, serv *servitor.Servitor) (err error) {
	if c.Message().Payload == "" {
		return c.Send("–ø–∞–∑—è–∑—è –¥–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—å–∫–∏x!")
	}
	var typ entities.VectorType
	typ.Name = c.Message().Payload
	err = serv.FreeMawVectorTypeAdd(typ)
	if err != nil {
		return c.Send("–ø—Ä–æ–∏–∑–æ—Å–ª–æ " + err.Error())
	}
	return c.Send("—É—Å–ø–µ—Å–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–≤—Å–∫–∏–π —Ç–∏–ø (—Ç–∞–π–ø) üíï")
}

func CmdVectorGetTypes(c tele.Context, serv *servitor.Servitor) (err error) {
	report, err := serv.FreeMawVectorTypes()
	if err != nil {
		return c.Send("–ø—Ä–æ–∏–∑–æ—Å–ª–æ " + err.Error())
	}
	message := ""
	for _, typ := range report {
		message += strconv.Itoa(typ.ID) + " - " + typ.Name
		if typ.Protected {
			message += "üõë"
		}
		message += "\n"
	}
	return c.Send(message)
}

func CmdVectorAddNew(c tele.Context, serv *servitor.Servitor) (err error) {
	if c.Message().Payload == "" {
		return c.Send("–ø–∞–∑—è–∑—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ üëê –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø–ª–æ—Å–∏–∫–∞!")
	}
	data := strings.Split(c.Message().Payload, ";")
	if len(data) < 4 {
		return c.Send("–ø–∞–∑—è–∑—è –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω–∏—Ö —Ç–æ—Ü–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π (–∑–∞–ø—è—Ç–æ—Ü–∫–æ–π):\n- –Ω–æ–º–∏—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω—å–∫–∏\n- —Å—Å—ã–ª–æ—Ü–∫—É –Ω–∞ –∫–∞–ª—Ç–∏–Ω–æ—Ü–∫—É\n- –≤–æ–ø–ª–æ—Å–∏–∫\n- –æ—Ç–≤–µ—Ç–∏–∫–∏ —á–∏—Ä–∏—Å –∑–∞–ø–∏—Ç—É—é, –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ")
	}
	for i, s := range data {
		data[i] = strings.TrimSpace(s)
	}

	var question entities.FreeVector
	question.TypeID, err = strconv.Atoi(data[0])
	if err != nil {
		return c.Send("–æ—Å–∏–±–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—å–∫–∏ - " + err.Error() + "\n–≤—ã —Ç–æ—á–Ω–æ –≤–≤–µ–ª–∏ —Ü–µ–ª–æ–µ —Ü–∏—Å–ª–æ?")
	}
	report, err := serv.FreeMawVectorTypes()
	if err != nil {
		return c.Send("–æ—Å–∏–±–∫–∞ –ø–ª–∏ –∑–∞–ø—Ä–æ—Å–∏ –Ω–æ–º–µ—Ä–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω - " + err.Error())
	}
	if !checkVectorTypesHaveNumber(report, question.TypeID) {
		return c.Send("–æ—Å–∏–±–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—å–∫–∏ - –≤—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—Å–µ—Å—Ç–≤—É—é—Å–∏–π –Ω–æ–º–µ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω–∫–∏")
	}
	question.PicLink = data[1]
	if !strings.Contains(data[1], "http") {
		return c.Send("–∫–∞–∑–µ—Ç—å—Å—è –≤—ã –≤–≤–µ–ª–∏ neco-—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–æ—Ç—å–∫—É üòà")
	}
	question.Question = data[2]
	answersArray := strings.Split(data[3], ",")
	for i := 0; i < len(answersArray); i++ {
		answersArray[i] = strings.TrimSpace(answersArray[i])
		// QuestionID:6666 is placeholder and be changed at the moment of DB insert
		question.Answers = append(question.Answers, entities.VectorAnswer{ID: i, QuestionID: 6666, Answer: answersArray[i]})
	}
	question.UserID = c.Sender().ID
	err = serv.FreeMawVectorAdd(question)
	if err != nil {
		return c.Send("–æ—Å–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –≤ –±–∞–∑—å–∫—É üòø " + err.Error())
	}
	return c.Send("–≤–æ–ø–ª–æ—Å–∏–∫ —É—Å–ø–µ—Å–Ω–æ –≤–Ω–µ—Å—ë–Ω—å –≤ –±–∞–∑—å–∫—É üíï")
}

func CmdVectorGame(c tele.Context, s *servitor.Servitor, brain *BigBrain) (err error) {
	// one game at a time
	if brain.ChatFlags[c.Chat().ID].VectorGame {
		return c.Send("–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞‚ùóÔ∏è")
	}
	if c.Message().Payload == "" {
		return c.Send("–ø–∞–∑—è–∑—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ üëê –Ω–æ–º–µ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!")
	}
	num, err := strconv.Atoi(c.Message().Payload)
	if err != nil {
		return c.Send("–æ—Å–∏–±–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—å–∫–∏\n–≤—ã —Ç–æ—á–Ω–æ –≤–≤–µ–ª–∏ —Ü–µ–ª–æ–µ —Ü–∏—Å–ª–æ?")
	}
	//c.Bot().Send(&tele.Chat{ID: c.Chat().ID}, strconv.Itoa(num))
	s.Logger.Info("vector game",
		slog.Int("mumber", num))
	gF := brain.ChatFlags[c.Chat().ID]
	gF.VectorGame = true
	brain.ChatFlags[c.Chat().ID] = gF
	var rs = make(map[int64]int)
	vc := freevector.NewVectorCore()
	for i := 0; i < 10; i++ {
		question, err := s.FreeMawVectorGetRandomByType(num)
		answerString := ""
		for ix, a := range question.Answers {
			if ix == len(question.Answers)-1 {
				answerString += a.Answer
			} else {
				answerString += a.Answer + " / "
			}
		}
		if err != nil {
			return c.Send("–æ—Å–∏–±–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n" + err.Error())
		}
		vc.CurrentQuestion = question
		brain.VectorGame[c.Chat().ID] = *vc
		s.Logger.Info("vector game calling question",
			slog.Int("mumber ", i))
		one, two, three := createHelpLines(question, s.Logger)
		m := &tele.Photo{
			File:    tele.FromURL(question.PicLink),
			Caption: fmt.Sprintf("–í–æ–ø—Ä–æ—Å %d - %s", i+1, question.Question),
		}
		c.Bot().Send(&tele.Chat{ID: c.Chat().ID}, m)
		firstHelp := false
		secondHelp := false
		thirdHelp := false

		vecscore := 3
		gameStart := time.Now()

		for {
			eslaped := time.Since(gameStart)
			select {
			case uidText := <-vc.VectorChan:
				// if we have 0 in chan - means /vectorstop has arrived
				if uidText.Uid == 0 {
					c.Bot().Send(&tele.Chat{ID: c.Chat().ID}, "–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —à–ø–∏–ª—É!")
					goto endshpil
				}

				if vc.CheckAnswer(strings.ToLower(uidText.Text)) {
					uname := brain.Users[uidText.Uid].Username
					s.Logger.Info("vector game loop question case of right answer",
						slog.Int("mumber ", i))
					c.Bot().Send(&tele.Chat{ID: c.Chat().ID}, "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ç–≤–µ—Ç, "+uname)
					rs[uidText.Uid] += vecscore
					s.FreeMaw.FreeMawVectorUpsertScore(uidText.Uid, num, vecscore)
					c.Bot().Send(&tele.Chat{ID: c.Chat().ID}, answerString)
					time.Sleep(4 * time.Second)
					goto nextQuestion
				}

			// checking stuff every second
			case <-time.After(1 * time.Second):
				if eslaped >= 15*time.Second && !firstHelp {
					s.Logger.Info("vector game loop question case of 15 secs",
						slog.Int("mumber ", i))
					c.Bot().Send(&tele.Chat{ID: c.Chat().ID}, "–ø–æ–¥—Å–∫–∞–∑—å–∫–∞ - "+one)
					firstHelp = true

				}
				if eslaped >= 30*time.Second && !secondHelp {
					s.Logger.Info("vector game loop question case of 30 secs",
						slog.Int("mumber ", i))
					c.Bot().Send(&tele.Chat{ID: c.Chat().ID}, "–ø–æ–¥—Å–∫–∞–∑—å–∫–∞ - "+two)
					secondHelp = true
					vecscore--
				}
				if eslaped >= 45*time.Second && !thirdHelp {
					s.Logger.Info("vector game loop question case of 30 secs",
						slog.Int("mumber ", i))
					c.Bot().Send(&tele.Chat{ID: c.Chat().ID}, "–ø–æ–¥—Å–∫–∞–∑—å–∫–∞ - "+three)
					thirdHelp = true
					vecscore--
				}
				if eslaped >= 60*time.Second {
					s.Logger.Info("vector game loop question case of 60 secs",
						slog.Int("mumber ", i))
					c.Bot().Send(&tele.Chat{ID: c.Chat().ID}, "–∫–∞–∫–∏–µ —Ç–æ –≤–∞–π–±—ã –∫–æ–∂–∞–Ω–Ω–æ–≥–æ –ø–æ–∑–æ—Ä–∞, –æ—Ç–≤–µ—Ç - "+answerString)
					time.Sleep(4 * time.Second)
					goto nextQuestion
				}

			}
		}
	nextQuestion:
		continue
	}
endshpil:
	gF.VectorGame = false
	brain.ChatFlags[c.Chat().ID] = gF
	res := ""
	for k, v := range rs {
		res += fmt.Sprintf("–ø–ª–µ–µ—Ä %s –Ω–∞–±—Ä–∞–ª %d –æ—á–∫–æ–±–µ–Ω–µ–π\n", brain.Users[k].Username, v)
	}
	return c.Send(res + "–∫–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞, –±–∏–∞—Ç—á")
}

func CmdVectorGetScores(c tele.Context, serv *servitor.Servitor, brain *BigBrain) error {
	report := "–û—á–∫–æ–±–µ–Ω–∏\n"
	scores, err := serv.FreeMawVectorGetTopScores(10)
	if err != nil {
		return c.Send("–ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—á–µ—á–µ–π: %s", err.Error())
	}
	for _, s := range scores {
		report += brain.Users[s.UID].Username + " " + strconv.Itoa(s.Score) + "\n"
	}
	return c.Send(report)
}

func checkVectorTypesHaveNumber(report []entities.VectorType, number int) bool {
	for _, typ := range report {
		if typ.ID == number {
			return true
		}
	}
	return false
}

func createHelpLines(q entities.FreeVector, logger *slog.Logger) (first, second, third string) {
	longest := ""
	for _, a := range q.Answers {
		if len(a.Answer) > len(longest) {
			longest = a.Answer
		}
	}
	longest = q.Answers[rand.Intn(len(q.Answers))].Answer
	logger.Info("vector game helping answer is",
		slog.String("answer ", longest))
	// short lines exceptions
	if len(longest) <= 2 {
		return "**", "**", "**"
	}
	if len(longest) <= 3 {
		return "***", "***", "***"
	}
	revealFirst := int(math.Round(float64(len(longest) * 20 / 100)))
	logger.Info("vector game estimates ",
		slog.Int("10% ", revealFirst))
	revealSecond := int(math.Round(float64(len(longest) * 30 / 100)))
	logger.Info("vector game estimates ",
		slog.Int("20% ", revealSecond))
	revealThird := int(math.Round(float64(len(longest) * 40 / 100)))
	logger.Info("vector game estimates ",
		slog.Int("40% ", revealThird))
	// Convert to rune slice to handle multi-byte characters properly
	if len(longest) == 4 {
		revealFirst = 1
		revealSecond = 1
		revealThird = 2
	}
	if len(longest) == 5 {
		revealFirst = 1
		revealSecond = 1
		revealThird = 2
	}
	if len(longest) == 6 {
		revealFirst = 1
		revealSecond = 2
		revealThird = 3
	}
	runes := []rune(longest)
	revealed := make([]rune, len(runes))
	logger.Info("vector game masking words with * and spaces")
	for i := range revealed {
		if runes[i] == ' ' {
			revealed[i] = ' '
		} else {
			revealed[i] = '*'
		}
	}
	logger.Info("vector game starting feeling loop")

	for i := 0; i < revealThird; {
		j := rand.Intn(len(revealed))
		if revealed[j] == '*' {
			revealed[j] = runes[j]
			i++
			logger.Info("vector game help creation",
				slog.String("help line ", string(revealed)),
				slog.Int("number of reveals ", i))
			if i == revealFirst {
				first = string(revealed)
				second = string(revealed)
			}
			if i == revealSecond {
				second = string(revealed)
			}
		}
	}
	third = string(revealed)
	return first, second, third
}

func checkAnswer(q entities.FreeVector, variant string) bool {
	for _, a := range q.Answers {
		if a.Answer == variant {
			return true
		}
	}
	return false
}
