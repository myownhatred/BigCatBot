package bigcat

import (
	"Guenhwyvar/entities"
	"Guenhwyvar/servitor"
	"strconv"
	"strings"

	tele "gopkg.in/telebot.v3"
)

func CmdVectorAddNewType(c tele.Context, serv *servitor.Servitor) (err error) {
	if c.Message().Payload == "" {
		return c.Send("–ø–∞–∑—è–∑—è –¥–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—å–∫–∏x!")
	}
	var typ entities.VectorType
	typ.Name = c.Message().Payload
	err = serv.FreeMawVectorTypeAdd(typ)
	if err != nil {
		return c.Send("–ø—Ä–æ–∏–∑–æ—Å–ª–æ " + err.Error())
	}
	return c.Send("—É—Å–ø–µ—Å–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–≤—Å–∫–∏–π —Ç–∏–ø (—Ç–∞–π–ø) üíï")
}

func CmdVectorGetTypes(c tele.Context, serv *servitor.Servitor) (err error) {
	report, err := serv.FreeMawVectorTypes()
	if err != nil {
		return c.Send("–ø—Ä–æ–∏–∑–æ—Å–ª–æ " + err.Error())
	}
	message := ""
	for _, typ := range report {
		message += strconv.Itoa(typ.ID) + " - " + typ.Name
		if typ.Protected {
			message += "üõë"
		}
		message += "\n"
	}
	return c.Send(message)
}

func CmdVectorAddNew(c tele.Context, serv *servitor.Servitor) (err error) {
	if c.Message().Payload == "" {
		return c.Send("–ø–∞–∑—è–∑—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ üëê –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø–ª–æ—Å–∏–∫–∞!")
	}
	data := strings.Split(c.Message().Payload, ",")
	if len(data) < 4 {
		return c.Send("–ø–∞–∑—è–∑—è –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω–∏—Ö –∑–∞–ø—è—Ç–∏–º–∏:\n- –Ω–æ–º–∏—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω—å–∫–∏\n- —Å—Å—ã–ª–æ—Ü–∫—É –Ω–∞ –∫–∞–ª—Ç–∏–Ω–æ—Ü–∫—É\n- –≤–æ–ø–ª–æ—Å–∏–∫\n- –æ—Ç–≤–µ—Ç–∏–∫–∏ —á–∏—Ä–∏—Å –∑–∞–ø–∏—Ç—É—é, –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ")
	}
	for i, s := range data {
		data[i] = strings.TrimSpace(s)
	}

	var question entities.FreeVector
	question.TypeID, err = strconv.Atoi(data[0])
	if err != nil {
		return c.Send("–æ—Å–∏–±–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—å–∫–∏ - " + err.Error() + "\n–≤—ã —Ç–æ—á–Ω–æ –≤–≤–µ–ª–∏ —Ü–µ–ª–æ–µ —Ü–∏—Å–ª–æ?")
	}
	report, err := serv.FreeMawVectorTypes()
	if err != nil {
		return c.Send("–æ—Å–∏–±–∫–∞ –ø–ª–∏ –∑–∞–ø—Ä–æ—Å–∏ –Ω–æ–º–µ—Ä–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω - " + err.Error())
	}
	if !checkVectorTypesHaveNumber(report, question.TypeID) {
		return c.Send("–æ—Å–∏–±–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—å–∫–∏ - –≤—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—Å–µ—Å—Ç–≤—É—é—Å–∏–π –Ω–æ–º–µ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω–∫–∏")
	}
	question.PicLink = data[1]
	if !strings.Contains(data[1], "http") {
		return c.Send("–∫–∞–∑–µ—Ç—å—Å—è –≤—ã –≤–≤–µ–ª–∏ neco-—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–æ—Ç—å–∫—É üòà")
	}
	question.Question = data[2]
	for i := 3; i < len(data); i++ {
		question.Answers = append(question.Answers, entities.VectorAnswer{ID: i, QuestionID: 6666, Answer: data[i]})
	}
	question.UserID = c.Sender().ID
	err = serv.FreeMawVectorAdd(question)
	if err != nil {
		return c.Send("–æ—Å–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –≤ –±–∞–∑—å–∫—É üòø " + err.Error())
	}
	return c.Send("–≤–æ–ø–ª–æ—Å–∏–∫ —É—Å–ø–µ—Å–Ω–æ –≤–Ω–µ—Å—ë–Ω—å –≤ –±–∞–∑—å–∫—É üíï")
}

func checkVectorTypesHaveNumber(report []entities.VectorType, number int) bool {
	for _, typ := range report {
		if typ.ID == number {
			return true
		}
	}
	return false
}
